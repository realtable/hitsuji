= Hitsuji

{rdoc-image:https://img.shields.io/travis/realtable/hitsuji.svg}[https://travis-ci.com/realtable/hitsuji] {rdoc-image:https://img.shields.io/github/issues/realtable/hitsuji.svg}[https://github.com/realtable/hitsuji/issues] {rdoc-image:https://img.shields.io/gem/dt/hitsuji.svg}[https://rubygems.org/gems/hitsuji] {rdoc-image:https://img.shields.io/gem/v/hitsuji.svg}[https://rubygems.org/gems/hitsuji]

Hitsuji is a library that lets you easily create, edit, manage and apply custom management systems. It is scalable from library card databases to performance analysis all the way to complete content management systems (like Wordpress.com).

home :: https://github.com/realtable/hitsuji
rdoc :: https://www.rubydoc.info/gems/hitsuji
gem :: https://rubygems.org/gems/hitsuji

== Installation

    $ gem install hitsuji

== Usage

Below are some examples of what Hitsuji can do.

=== Example 1

    # getting the Hitsuji library from RubyGems
    require 'rubygems'
    require 'hitsuji'

    # creating a system and importing some values we had before into it
    my_system = Hitsuji.new
    my_system.import('/a/valid/path')

    # making some new items for our system
    my_item = my_system.item(:foo, 'Hey look, a new item!')
    my_item2 = my_system.item(:bar, 'And another.')

    # making a linker with those items in it
    my_linker = my_system.linker(:baz, [my_item, my_item2])
    my_system.bind(my_item2, my_linker)

    # exporting it for future use
    my_system.export('/another/valid/path')
  
=== Example 2

    # getting the Hitsuji library from RubyGems
    require 'rubygems'
    require 'hitsuji'

    # creating a new blank system
    my_system = Hitsuji.new

    # adding two items and a linker with them both
    my_item = my_system.item(:foo, 42)
    my_item2 = my_system.item(:bar, 19)
    my_linker = my_system.linker(:baz, [my_item, my_item2])

    # putting the linker into an operation
    my_system.bind(my_linker)
    my_op = my_system.operation(:quux, my_linker, %{
      |arg1, arg2| arg1 * arg2 - arg2 % arg1
    }) # => (42 * 19) - (19 % 42) => 779

    # putting the operation into another linker and then putting that into an operation
    my_linker2 = my_system.linker(:name, [my_linker, my_op])
    my_op2 = my_system.operation(:name2, my_linker2, %{
      |arg1, arg2, arg3| arg3 - arg1 / arg2 + 10
    }) # => 779 - (42 / 19) + 10 => 786.79 (to nearest 2 d.p.)
